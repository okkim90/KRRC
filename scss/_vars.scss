$breakpoint-m: 767px;
$breakpoint-t: 1280px;


$colors: (
    'key': #035C77,
    'key2': #0F80A1,
    'key3': #1CB0D4,
    'key4': #F4FDFF,
    'red': #F01B1B,
    'line': #eaeaea,
    'line2': #dfdfdf,
    'line_btn': #dfdfdf,
    'bg': #f6f6f6,
    'bg2': #f9f9f9,
    'grey1' : #666,
    'grey2' : #999,
    'black': #000,
    'orange': #FF9900
);


$btn_color: (
    'c1': #fff,
    'c2': #1CB0D4,
    'c3': #0F80A1,
    'c4': #999,
    'c_red': #F01B1B,
);



$f_size: (
    'f_super': 56px,
    'f_big': 48px,
    'f_mid': 40px,
    'f_small': 32px,
);



:root{
    @each $key, $value in $colors {
        --#{$key} : #{$value};
    }
}

@function color($name){
    @if not map-get($colors, $name+''){
        @error "Color `#{$name}` not found in map $colors";
    }
    @return var(--#{$name});
}


@each $key, $color in $colors {
    .fc_#{$key} {
        color: $color !important;
    }
    .bg_#{$key} {
        background-color: $color;
    }
    .bd_#{$key} {
        border: 1px solid $color;
    }
    .bdT_#{$key} {
        border-top: 1px solid $color;
    }
    .bdB_#{$key} {
        border-bottom: 1px solid $color;
    }
    .bdL_#{$key} {
        border-left: 1px solid $color;
    }
    .bdR_#{$key} {
        border-right: 1px solid $color;
    }
    
}




@mixin btn($c, $bd, $bg, $hv_bg){
    transition: all .1s ease-in-out;
    min-width: 120px;
    padding: 0 20px;
    background-color: $bg;
    border:1px solid $bd;
    color: $c;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    text-align: center;
    box-sizing: border-box;
    
    @media (hover: hover) {
        &:hover {
            background-color: $hv_bg;
            border-color: $hv_bg;
            color: #fff;
            text-decoration: none;
        }
    }
    
}
@each $key, $color in $btn_color {
    .f_btn  {
        &.#{$key} {
            @if($key == 'c1'){
                @include btn(#000, color(line_btn), $color, color(key3))
            }
            @else if($key == 'c2'){
                @include btn(#fff, $color, $color, color(key2))
            }
            @else if($key == 'c3'){
                @include btn(#fff, $color, $color, color(key))
            }
            @else {
                @include btn(#fff, $color, $color, darken($color,8%))
            }
        }
    }
}

@each $key, $size in $f_size {

    .f_btn  {
        &.#{$key} {
            height: $size;
            @if($key == 'f_super' or $key == 'f_big'){
                font-size: 16px;
            }
            @if($key == 'f_mid' ){
                font-size: 14px;
            }
            @if($key == 'f_small' ){
                font-size: 12px;
                padding: 0 12px;
                min-width: 54px;
            }
        }
    }
}


@mixin flex_gap ($col ,$gapX:0, $gapY:0){
    display: flex;
    flex-wrap: wrap;
    gap: $gapY $gapX;
    .col_item {
        width: calc((100% / $col) - ((($col - 1)/$col)*$gapX));
    }
}

@mixin text-hidden($line: 1, $lineHeight: 19, $auto: null) {
    width: 100%;
    display: -webkit-box !important;
    -webkit-line-clamp: $line;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
    line-height: calc(($lineHeight * $line) / $line);
    

    @if $auto ==auto {
        //영역 자동
        max-height: $lineHeight * $line;
    }

    @else {
        //처음부터 영역잡히게
        height: $lineHeight * $line;
    }
}



@mixin tablet {
    @media only screen and (max-width: #{$breakpoint-t}) {
        @content;
    }
};
@mixin mobile {
    @media only screen and (max-width: #{$breakpoint-m}) {
        @content;
    }
}

$gap: (
    'gap1':40px,
    'gap2':24px,
    'gap3':60px,
    'gap4':16px,
);
$gap_m: (
    'gap1':24px,
    'gap2':16px,
    'gap3':40px,
    'gap4':10px,
);

@each $key, $gap in $gap {
    .mt_#{$key} {
        margin-top: $gap;
    }
    .mb_#{$key} {
        margin-bottom: $gap;
    }
    .ml_#{$key} {
        margin-left: $gap;
    }
    .mr_#{$key} {
        margin-right: $gap;
    }
    .pt_#{$key} {
        padding-top: $gap;
    }
    .pb_#{$key} {
        padding-bottom: $gap;
    }
    .pl_#{$key} {
        padding-left: $gap;
    }
    .pr_#{$key} {
        padding-right: $gap;
    }
}

@include tablet {
    @each $key, $gap in $gap_m {
        .mt_#{$key} {
            margin-top: $gap;
        }
        .mb_#{$key} {
            margin-bottom: $gap;
        }
        .ml_#{$key} {
            margin-left: $gap;
        }
        .mr_#{$key} {
            margin-right: $gap;
        }
        .pt_#{$key} {
            padding-top: $gap;
        }
        .pb_#{$key} {
            padding-bottom: $gap;
        }
        .pl_#{$key} {
            padding-left: $gap;
        }
        .pr_#{$key} {
            padding-right: $gap;
        }
    }
}
@for $i from 1 through 20 {
    $w : 10*$i;
    $maxw : 100*$i;
    $z : 5*$i;
    .w_#{$w} {
        width: #{$w}px
    }
    @if $maxw <= 1000 {
        .maxW_#{$maxw} {
            max-width: #{$maxw}px
        }
        .minW_#{$maxw} {
            min-width: #{$maxw}px
        }
    }
   
    .mt_#{$i} {
        margin-top: #{$i}px;
    }
    .ml_#{$i} {
        margin-left: #{$i}px
    }
    .mr_#{$i} {
        margin-right: #{$i}px
    }
    .mb_#{$i} {
        margin-bottom: #{$i}px
    }
    .pt_#{$i} {
        padding-top: #{$i}px;
    }
    .pl_#{$i} {
        padding-left: #{$i}px
    }
    .pr_#{$i} {
        padding-right: #{$i}px
    }
    .pb_#{$i} {
        padding-bottom: #{$i}px
    }
    .mt#{$z} {
        margin-top: #{$z}px;
    }
    .ml#{$z} {
        margin-left: #{$z}px
    }
    .mr#{$z} {
        margin-right: #{$z}px
    }
    .mb#{$z} {
        margin-bottom: #{$z}px
    }
    .pt#{$z} {
        padding-top: #{$z}px;
    }
    .pl#{$z} {
        padding-left: #{$z}px
    }
    .pr#{$z} {
        padding-right: #{$z}px
    }
    .pb#{$z} {
        padding-bottom: #{$z}px
    }
}


@mixin text-hidden-single {
    display: inline-block;
    vertical-align: middle;
    max-width: 100%;
    text-overflow: ellipsis;
    overflow: hidden;
    white-space: nowrap;
}
@mixin text-hidden($line: 1, $lineHeight: 19, $auto: null) {
    width: 100%;
    display: -webkit-box !important;
    -webkit-line-clamp: $line;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
    line-height: calc(($lineHeight * $line) / $line);
    

    @if $auto ==auto {
        //영역 자동
        max-height: $lineHeight * $line;
    }

    @else {
        //처음부터 영역잡히게
        height: $lineHeight * $line;
    }
}


@for $i from 1 through 4 {
    @if($i == 1){
        .ellipsis_#{$i} {
            @include text-hidden-single
        }
    }
    @else if ($i > 1){
        .ellipsis_#{$i} {
            $lh : 1.4;
            @include text-hidden($i, $lh)
        }
    }
    
} 



.fz_nm {
    font-size: 16px;
    line-height: 1.5;
    @include tablet {
        font-size: 14px;
    }
}

.tdU, a.tdU {
    text-decoration: underline;
}

._lh {
    line-height: 1.4;
}
.taL {
    text-align: left;
}
.taC {
    text-align: center;
}
.taR {
    text-align: right;
}
.m_only {
    display: none;
    @include tablet {
        display: block;
    }
}

.ico_new {
    width: 20px;
    height: 20px;
    border-radius: 50%;
    background-color: color(orange);
    color: #fff;
    font-size: 12px;
    font-weight: bold;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
}